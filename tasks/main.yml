- name: Add Elasticsearch APT key
  apt_key:
    url: 'http://packages.elasticsearch.org/GPG-KEY-elasticsearch'
    id: '{{ kibana_key_id }}'
    state: present

- name: Add Kibana repository
  apt_repository:
    repo: "deb http://packages.elastic.co/kibana/{{ kibana_version }}/debian stable main"
    state: present
    update_cache: True

- name: Install kibana
  apt:
    package: kibana
    state: present

- name: Install apache2 utils
  apt:
    package: apache2-utils
    state: present

- name: Check kibana filebeat dashboards
  stat: path=/opt/filebeat-dashboards.zip
  register: kibana_dashboards_present

- name: Copy kibana filebeat dashboards
  copy:
    src: filebeat-dashboards.zip
    dest: /opt/filebeat-dashboards.zip
    owner: root
    group: root
    mode: 0644
  when: kibana_dashboards_present.stat.exists == False

- name: Install kibana filebeat dashboards
  unarchive: src=/opt/filebeat-dashboards.zip dest=/tmp/ copy=no
  when: kibana_dashboards_present.stat.exists == False

- name: Configure kibana filebeat dashboards
  shell: sh /tmp/beats-dashboards-master/load.sh -url "http://localhost:9200" -user "{{kibana_user}}:{{kibana_password}}"
  when: kibana_dashboards_present.stat.exists == False

- name: Check kibana users
  stat: path=/etc/nginx/htpasswd.users
  register: kibana_user_pwfile_exists

- name: Create kibana admin user
  command: htpasswd -b -c /etc/nginx/htpasswd.users {{kibana_user}} {{kibana_password}}
  when: kibana_user_pwfile_exists.stat.exists == false

- name: Setup kibana service
  service: name=kibana state=started enabled=true

- name: Prepare logstash directory
  file:
      path: /usr/share/logstash
      state: directory
      owner: root
      group: root
      mode: 0755

#- name: Check Filebeat forwarder SSL certificate
#  stat: path=/usr/share/logstash/beat-forwarder.crt
#  ignore_errors: true
#  register: filebeat_forwarder_ssl_exists
#
#- name: Create client forwarder SSL certificate
#  command: openssl req -subj '/CN={{ ansible_fqdn }}/' -config /etc/ssl/openssl_extras.cnf \
#    -x509 -days 3650 -batch -nodes -newkey rsa:2048 -keyout /usr/share/logstash/beat-forwarder.key \
#    -out /usr/share/logstash/beat-forwarder.crt
#  ignore_errors: true
#  when: filebeat_forwarder_ssl_exists.stat.exists == False
#
#- name: Check Filebeat forwarder SSL certificate copy
#  stat: path=/usr/share/nginx/html/beat-forwarder.crt
#  register: filebeat_forwarder_ssl_client_copy_exists
#
#- name: Copy Filebeat forwarder SSL certificate
#  command: cp /usr/share/logstash/beat-forwarder.crt /usr/share/nginx/html/beat-forwarder.crt
#  ignore_errors: true
#  when: filebeat_forwarder_ssl_client_copy_exists.stat.exists == False
#  register: filebeat_cert
#
#- name: Copy Filebeat forwarder SSL certificate key
#  command: cp /usr/share/logstash/beat-forwarder.key /usr/share/nginx/html/beat-forwarder.key
#  when: filebeat_forwarder_ssl_client_copy_exists.stat.exists == False

- name: Install logstash cert
  copy:
    src: "{{ elk_beat_forwarder_cert }}"
    dest: "/usr/share/logstash/beat-forwarder.crt"
  register: filebeat_cert

- name: Install logstash key
  copy:
    src: "{{ elk_beat_forwarder_key }}"
    dest: "/usr/share/logstash/beat-forwarder.key"

- name: Set permissions on logstash certificate
  file:
    path: /usr/share/logstash/beat-forwarder.crt
    owner: logstash
    group: logstash
    mode: 0600

- name: Set permissions on logstash certificate key
  file:
    path: /usr/share/logstash/beat-forwarder.key
    owner: logstash
    group: logstash
    mode: 0600

- name: Enable logstash service
  service: name=logstash state=started enabled=true

- name: Restart logstash
  service:
    name: logstash
    state: restarted
  when: filebeat_cert.changed == True

- name: Wait for elasticsearch index to be available
  uri:
    url: http://localhost:9200/_cat/indices
    status_code: 200
  register: es_service_result
  until: es_service_result.status == 200
  retries: 50
  delay: 10

- name: Check elasticsearch index for content
  uri:
    url=http://localhost:9200/_cat/indices
    method=GET
    return_content=yes
  register: elasticsearch_index

- name: Check for TCP/{{ logstash_localsyslog_port }} logstash internal listener port, this may take a while
  wait_for:
    host: localhost
    port: '{{ logstash_localsyslog_port }}'
    delay: 10
    connect_timeout: 5
    timeout: 420
    state: started

- name: Check for TCP/{{ logstash_syslog_port }} logstash external listener port, this may take a while
  wait_for:
    host: localhost
    port: '{{ logstash_syslog_port }}'
    delay: 10
    connect_timeout: 5
    timeout: 420
    state: started

- name: Populate elasticsearch index with local syslog data
  lineinfile: dest=/etc/rsyslog.conf \
          line="*.* @localhost:{{ logstash_localsyslog_port }}"
  register: rsyslog_updated

- name: Restart rsyslogd to populate elasticsearch index
  command: systemctl restart rsyslog.service
  ignore_errors: true
  when: rsyslog_updated.changed == True

- name: Configure kibana
  template:
    src: "kibana.yml.j2"
    dest: "/opt/kibana/config/kibana.yml"
  notify: Restart kibana

- name: Install ElasticSearch Curator
  apt:
    name: elasticsearch-curator
    state: present